#!/bin/bash

# Docker Helper - Interactive Docker Management
# Gerencia containers, compose e desenvolvimento via menu
# Usage: ./docker-helper.sh ou docker-help (se instalado)

# Cores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# Verificar se Docker est√° dispon√≠vel
check_docker() {
    if ! command -v docker >/dev/null 2>&1; then
        echo -e "${RED}‚ùå Docker n√£o encontrado${NC}"
        exit 1
    fi
    
    if ! docker ps >/dev/null 2>&1; then
        echo -e "${RED}‚ùå Docker n√£o est√° rodando ou sem permiss√£o${NC}"
        echo -e "${CYAN}üí° Execute 'sudo systemctl start docker' ou fa√ßa logout/login${NC}"
        exit 1
    fi
}

# Header
show_header() {
    clear
    echo -e "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${BLUE}‚ïë                    üê≥ DOCKER HELPER                          ‚ïë${NC}"
    echo -e "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
    
    # Docker info
    local running_containers=$(docker ps -q | wc -l)
    local total_containers=$(docker ps -a -q | wc -l)
    local images_count=$(docker images -q | wc -l)
    
    echo -e "${CYAN}üê≥ Containers ativos: ${YELLOW}$running_containers${NC}"
    echo -e "${CYAN}üì¶ Total containers: ${YELLOW}$total_containers${NC}"
    echo -e "${CYAN}üñºÔ∏è  Images: ${YELLOW}$images_count${NC}"
    echo ""
}

# Menu principal
show_main_menu() {
    echo -e "${BLUE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê MENU PRINCIPAL ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    echo -e "${YELLOW}1.${NC}  üìä Status & Info"
    echo -e "${YELLOW}2.${NC}  üöÄ Dev Environments (Node/Python/DS)"
    echo -e "${YELLOW}3.${NC}  üì¶ Containers"
    echo -e "${YELLOW}4.${NC}  üñºÔ∏è  Images"
    echo -e "${YELLOW}5.${NC}  üìã Docker Compose"
    echo -e "${YELLOW}6.${NC}  üåê Networks"
    echo -e "${YELLOW}7.${NC}  üíæ Volumes"
    echo -e "${YELLOW}8.${NC}  üßπ Cleanup"
    echo -e "${YELLOW}9.${NC}  üìú Logs"
    echo -e "${YELLOW}0.${NC}  ‚ùå Sair"
    echo ""
    echo -ne "${PURPLE}Escolha uma op√ß√£o [0-9]: ${NC}"
}

# 1. Status & Info
status_info() {
    clear
    echo -e "${BLUE}üìä DOCKER STATUS & INFORMA√á√ïES${NC}"
    echo -e "${BLUE}==============================${NC}"
    echo ""
    
    echo -e "${CYAN}üê≥ Docker Version:${NC}"
    docker version --format "table {{.Server.Version}}\t{{.Server.Os}}/{{.Server.Arch}}"
    echo ""
    
    echo -e "${CYAN}üìä System Info:${NC}"
    docker system df
    echo ""
    
    echo -e "${CYAN}üî• Containers ativos:${NC}"
    if [ $(docker ps -q | wc -l) -eq 0 ]; then
        echo -e "${YELLOW}Nenhum container ativo${NC}"
    else
        docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}"
    fi
    echo ""
    
    echo -e "${CYAN}‚ö° Resource Usage:${NC}"
    docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}" 2>/dev/null || echo "Nenhum container ativo"
    
    echo ""
    read -p "Pressione Enter para continuar..."
}

# 2. Dev Environments
dev_environments() {
    clear
    echo -e "${BLUE}üöÄ AMBIENTES DE DESENVOLVIMENTO${NC}"
    echo -e "${BLUE}===============================${NC}"
    echo ""
    
    # Check workspace
    if [ ! -d "$HOME/docker-workspace" ]; then
        echo -e "${RED}‚ùå Docker workspace n√£o encontrado${NC}"
        echo -e "${CYAN}üí° Execute fedora-post-install.sh primeiro${NC}"
        read -p "Pressione Enter..."
        return
    fi
    
    # Status dos ambientes
    echo -e "${CYAN}üìä Status dos ambientes:${NC}"
    cd "$HOME/docker-workspace/compose-files"
    
    local envs=("nodejs-dev" "python-web" "datascience")
    for env in "${envs[@]}"; do
        if docker ps --format "{{.Names}}" | grep -q "$env"; then
            echo -e "${GREEN}‚úÖ $env - ATIVO${NC}"
        else
            echo -e "${YELLOW}‚è∏Ô∏è  $env - PARADO${NC}"
        fi
    done
    echo ""
    
    echo -e "${YELLOW}1.${NC} üü¢ Iniciar Node.js Dev"
    echo -e "${YELLOW}2.${NC} üêç Iniciar Python Web"
    echo -e "${YELLOW}3.${NC} üî¨ Iniciar Data Science"
    echo -e "${YELLOW}4.${NC} ‚èπÔ∏è  Parar ambiente espec√≠fico"
    echo -e "${YELLOW}5.${NC} üõë Parar todos os ambientes"
    echo -e "${YELLOW}6.${NC} üîÑ Restart ambiente"
    echo -e "${YELLOW}7.${NC} üíª Acessar shell do container"
    echo -e "${YELLOW}0.${NC} Voltar"
    echo ""
    echo -ne "${PURPLE}Escolha [0-7]: ${NC}"
    
    read choice
    case $choice in
        1)
            echo -e "${CYAN}üöÄ Iniciando Node.js environment...${NC}"
            docker-compose -f nodejs-dev.yml up -d
            echo -e "${GREEN}‚úÖ Node.js ativo em ports 3000, 5173, 8080${NC}"
            ;;
        2)
            echo -e "${CYAN}üêç Iniciando Python Web environment...${NC}"
            docker-compose -f python-web.yml up -d
            echo -e "${GREEN}‚úÖ Python Web ativo - FastAPI:8000, Flask:5000, Streamlit:8501${NC}"
            echo -e "${CYAN}üóÑÔ∏è PostgreSQL: localhost:5432 (dev/devpass/devdb)${NC}"
            ;;
        3)
            echo -e "${CYAN}üî¨ Iniciando Data Science environment...${NC}"
            # Check GPU
            if command -v nvidia-smi &> /dev/null && nvidia-smi &> /dev/null; then
                echo -e "${GREEN}üöÄ GPU NVIDIA detectada - usando imagem GPU${NC}"
                sed -i 's/jupyter\/tensorflow-notebook:latest/tensorflow\/tensorflow:latest-gpu-jupyter/' datascience.yml
            fi
            docker-compose -f datascience.yml up -d
            echo -e "${GREEN}‚úÖ Data Science ativo${NC}"
            echo -e "${CYAN}üìä Jupyter Lab: http://localhost:8888 (token: dev123)${NC}"
            echo -e "${CYAN}üß™ MLflow: http://localhost:5555${NC}"
            ;;
        4)
            echo -e "${CYAN}Qual ambiente parar? (nodejs-dev/python-web/datascience):${NC}"
            read env_name
            docker-compose -f "${env_name}.yml" down 2>/dev/null || echo -e "${RED}Ambiente n√£o encontrado${NC}"
            ;;
        5)
            echo -e "${CYAN}‚èπÔ∏è Parando todos os ambientes...${NC}"
            docker-compose -f nodejs-dev.yml down 2>/dev/null
            docker-compose -f python-web.yml down 2>/dev/null
            docker-compose -f datascience.yml down 2>/dev/null
            echo -e "${GREEN}‚úÖ Todos os ambientes parados${NC}"
            ;;
        6)
            echo -e "${CYAN}Qual ambiente reiniciar? (nodejs-dev/python-web/datascience):${NC}"
            read env_name
            docker-compose -f "${env_name}.yml" restart 2>/dev/null || echo -e "${RED}Ambiente n√£o encontrado${NC}"
            ;;
        7)
            echo -e "${CYAN}Containers dispon√≠veis:${NC}"
            docker ps --format "{{.Names}}"
            echo ""
            echo -e "${CYAN}Nome do container:${NC}"
            read container_name
            echo -e "${CYAN}Shell (bash/sh/zsh) [bash]:${NC}"
            read shell_type
            shell_type=${shell_type:-bash}
            docker exec -it "$container_name" "$shell_type"
            ;;
        0)
            return
            ;;
    esac
    
    echo ""
    read -p "Pressione Enter para continuar..."
}

# 3. Containers
manage_containers() {
    clear
    echo -e "${BLUE}üì¶ GERENCIAMENTO DE CONTAINERS${NC}"
    echo -e "${BLUE}=============================${NC}"
    echo ""
    
    echo -e "${CYAN}üìã Containers:${NC}"
    docker ps -a --format "table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}"
    echo ""
    
    echo -e "${YELLOW}1.${NC} ‚ñ∂Ô∏è  Start container"
    echo -e "${YELLOW}2.${NC} ‚èπÔ∏è  Stop container"
    echo -e "${YELLOW}3.${NC} üîÑ Restart container"
    echo -e "${YELLOW}4.${NC} üóëÔ∏è  Remove container"
    echo -e "${YELLOW}5.${NC} üíª Exec shell no container"
    echo -e "${YELLOW}6.${NC} üìä Stats em tempo real"
    echo -e "${YELLOW}7.${NC} üîç Inspect container"
    echo -e "${YELLOW}0.${NC} Voltar"
    echo ""
    echo -ne "${PURPLE}Escolha [0-7]: ${NC}"
    
    read choice
    case $choice in
        1|2|3|4)
            echo -e "${CYAN}Nome do container:${NC}"
            read container_name
            case $choice in
                1) docker start "$container_name" ;;
                2) docker stop "$container_name" ;;
                3) docker restart "$container_name" ;;
                4) 
                    echo -e "${YELLOW}‚ö†Ô∏è Confirma remo√ß√£o? (y/N):${NC}"
                    read -n 1 confirm
                    echo
                    if [[ $confirm =~ ^[Yy]$ ]]; then
                        docker rm "$container_name"
                    fi
                    ;;
            esac
            ;;
        5)
            echo -e "${CYAN}Nome do container:${NC}"
            read container_name
            echo -e "${CYAN}Comando [/bin/bash]:${NC}"
            read cmd
            cmd=${cmd:-/bin/bash}
            docker exec -it "$container_name" "$cmd"
            ;;
        6)
            docker stats
            ;;
        7)
            echo -e "${CYAN}Nome do container:${NC}"
            read container_name
            docker inspect "$container_name" | less
            ;;
        0)
            return
            ;;
    esac
    
    echo ""
    read -p "Pressione Enter para continuar..."
}

# 4. Images
manage_images() {
    clear
    echo -e "${BLUE}üñºÔ∏è  GERENCIAMENTO DE IMAGES${NC}"
    echo -e "${BLUE}==========================${NC}"
    echo ""
    
    echo -e "${CYAN}üìã Images:${NC}"
    docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}\t{{.CreatedSince}}"
    echo ""
    
    echo -e "${YELLOW}1.${NC} üì• Pull image"
    echo -e "${YELLOW}2.${NC} üóëÔ∏è  Remove image"
    echo -e "${YELLOW}3.${NC} üßπ Remove unused images"
    echo -e "${YELLOW}4.${NC} üîç Inspect image"
    echo -e "${YELLOW}5.${NC} üìä Image history"
    echo -e "${YELLOW}0.${NC} Voltar"
    echo ""
    echo -ne "${PURPLE}Escolha [0-5]: ${NC}"
    
    read choice
    case $choice in
        1)
            echo -e "${CYAN}Nome da image (ex: node:18-alpine):${NC}"
            read image_name
            docker pull "$image_name"
            ;;
        2)
            echo -e "${CYAN}Nome da image para remover:${NC}"
            read image_name
            echo -e "${YELLOW}‚ö†Ô∏è Confirma remo√ß√£o? (y/N):${NC}"
            read -n 1 confirm
            echo
            if [[ $confirm =~ ^[Yy]$ ]]; then
                docker rmi "$image_name"
            fi
            ;;
        3)
            echo -e "${CYAN}üßπ Removendo images n√£o utilizadas...${NC}"
            docker image prune -f
            ;;
        4)
            echo -e "${CYAN}Nome da image:${NC}"
            read image_name
            docker inspect "$image_name" | less
            ;;
        5)
            echo -e "${CYAN}Nome da image:${NC}"
            read image_name
            docker history "$image_name"
            ;;
        0)
            return
            ;;
    esac
    
    echo ""
    read -p "Pressione Enter para continuar..."
}

# 5. Docker Compose
manage_compose() {
    clear
    echo -e "${BLUE}üìã DOCKER COMPOSE${NC}"
    echo -e "${BLUE}=================${NC}"
    echo ""
    
    if [ ! -f "docker-compose.yml" ] && [ ! -f "compose.yml" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è Nenhum docker-compose.yml encontrado no diret√≥rio atual${NC}"
        echo -e "${CYAN}Diret√≥rio atual: $(pwd)${NC}"
        echo ""
        echo -e "${CYAN}Navegar para docker-workspace? (y/N):${NC}"
        read -n 1 navigate
        echo
        if [[ $navigate =~ ^[Yy]$ ]]; then
            cd "$HOME/docker-workspace/compose-files" 2>/dev/null || echo -e "${RED}Docker workspace n√£o encontrado${NC}"
        fi
    fi
    
    echo -e "${YELLOW}1.${NC} üöÄ Up (start services)"
    echo -e "${YELLOW}2.${NC} ‚èπÔ∏è  Down (stop and remove)"
    echo -e "${YELLOW}3.${NC} üîÑ Restart services"
    echo -e "${YELLOW}4.${NC} üìä Status (ps)"
    echo -e "${YELLOW}5.${NC} üìú Logs"
    echo -e "${YELLOW}6.${NC} üßπ Down + remove volumes"
    echo -e "${YELLOW}7.${NC} üìã Escolher arquivo compose"
    echo -e "${YELLOW}0.${NC} Voltar"
    echo ""
    echo -ne "${PURPLE}Escolha [0-7]: ${NC}"
    
    read choice
    case $choice in
        1)
            echo -e "${CYAN}üöÄ Docker Compose Up...${NC}"
            docker-compose up -d
            ;;
        2)
            echo -e "${CYAN}‚èπÔ∏è Docker Compose Down...${NC}"
            docker-compose down
            ;;
        3)
            echo -e "${CYAN}üîÑ Docker Compose Restart...${NC}"
            docker-compose restart
            ;;
        4)
            docker-compose ps
            ;;
        5)
            echo -e "${CYAN}Servi√ßo espec√≠fico ou todos? [all]:${NC}"
            read service_name
            if [ -z "$service_name" ] || [ "$service_name" = "all" ]; then
                docker-compose logs -f
            else
                docker-compose logs -f "$service_name"
            fi
            ;;
        6)
            echo -e "${YELLOW}‚ö†Ô∏è Isso remover√° volumes! Confirma? (y/N):${NC}"
            read -n 1 confirm
            echo
            if [[ $confirm =~ ^[Yy]$ ]]; then
                docker-compose down -v
            fi
            ;;
        7)
            echo -e "${CYAN}Arquivos compose dispon√≠veis:${NC}"
            ls -1 *.yml 2>/dev/null || echo "Nenhum arquivo .yml encontrado"
            echo ""
            echo -e "${CYAN}Nome do arquivo:${NC}"
            read compose_file
            if [ -f "$compose_file" ]; then
                export COMPOSE_FILE="$compose_file"
                echo -e "${GREEN}‚úÖ Usando $compose_file${NC}"
            else
                echo -e "${RED}‚ùå Arquivo n√£o encontrado${NC}"
            fi
            ;;
        0)
            return
            ;;
    esac
    
    echo ""
    read -p "Pressione Enter para continuar..."
}

# 6. Networks
manage_networks() {
    clear
    echo -e "${BLUE}üåê GERENCIAMENTO DE NETWORKS${NC}"
    echo -e "${BLUE}===========================${NC}"
    echo ""
    
    echo -e "${CYAN}üìã Networks:${NC}"
    docker network ls
    echo ""
    
    echo -e "${YELLOW}1.${NC} üåê Create network"
    echo -e "${YELLOW}2.${NC} üóëÔ∏è  Remove network"
    echo -e "${YELLOW}3.${NC} üîç Inspect network"
    echo -e "${YELLOW}4.${NC} üßπ Prune unused networks"
    echo -e "${YELLOW}0.${NC} Voltar"
    echo ""
    echo -ne "${PURPLE}Escolha [0-4]: ${NC}"
    
    read choice
    case $choice in
        1)
            echo -e "${CYAN}Nome da network:${NC}"
            read network_name
            docker network create "$network_name"
            ;;
        2)
            echo -e "${CYAN}Nome da network para remover:${NC}"
            read network_name
            docker network rm "$network_name"
            ;;
        3)
            echo -e "${CYAN}Nome da network:${NC}"
            read network_name
            docker network inspect "$network_name"
            ;;
        4)
            docker network prune -f
            echo -e "${GREEN}‚úÖ Networks n√£o utilizadas removidas${NC}"
            ;;
        0)
            return
            ;;
    esac
    
    echo ""
    read -p "Pressione Enter para continuar..."
}

# 7. Volumes
manage_volumes() {
    clear
    echo -e "${BLUE}üíæ GERENCIAMENTO DE VOLUMES${NC}"
    echo -e "${BLUE}==========================${NC}"
    echo ""
    
    echo -e "${CYAN}üìã Volumes:${NC}"
    docker volume ls
    echo ""
    
    echo -e "${YELLOW}1.${NC} üíæ Create volume"
    echo -e "${YELLOW}2.${NC} üóëÔ∏è  Remove volume"
    echo -e "${YELLOW}3.${NC} üîç Inspect volume"
    echo -e "${YELLOW}4.${NC} üßπ Prune unused volumes"
    echo -e "${YELLOW}5.${NC} üìä Volume usage"
    echo -e "${YELLOW}0.${NC} Voltar"
    echo ""
    echo -ne "${PURPLE}Escolha [0-5]: ${NC}"
    
    read choice
    case $choice in
        1)
            echo -e "${CYAN}Nome do volume:${NC}"
            read volume_name
            docker volume create "$volume_name"
            ;;
        2)
            echo -e "${CYAN}Nome do volume para remover:${NC}"
            read volume_name
            echo -e "${YELLOW}‚ö†Ô∏è Confirma remo√ß√£o? (y/N):${NC}"
            read -n 1 confirm
            echo
            if [[ $confirm =~ ^[Yy]$ ]]; then
                docker volume rm "$volume_name"
            fi
            ;;
        3)
            echo -e "${CYAN}Nome do volume:${NC}"
            read volume_name
            docker volume inspect "$volume_name"
            ;;
        4)
            echo -e "${YELLOW}‚ö†Ô∏è Remover volumes n√£o utilizados? (y/N):${NC}"
            read -n 1 confirm
            echo
            if [[ $confirm =~ ^[Yy]$ ]]; then
                docker volume prune -f
            fi
            ;;
        5)
            docker system df -v
            ;;
        0)
            return
            ;;
    esac
    
    echo ""
    read -p "Pressione Enter para continuar..."
}

# 8. Cleanup
cleanup_docker() {
    clear
    echo -e "${BLUE}üßπ LIMPEZA DO DOCKER${NC}"
    echo -e "${BLUE}===================${NC}"
    echo ""
    
    echo -e "${CYAN}üìä Uso atual do disco:${NC}"
    docker system df
    echo ""
    
    echo -e "${YELLOW}1.${NC} üßπ Cleanup b√°sico (containers parados, networks, images sem tag)"
    echo -e "${YELLOW}2.${NC} üí£ Cleanup completo (CUIDADO: remove tudo n√£o utilizado)"
    echo -e "${YELLOW}3.${NC} üóëÔ∏è  Remove containers parados"
    echo -e "${YELLOW}4.${NC} üñºÔ∏è  Remove images sem tag"
    echo -e "${YELLOW}5.${NC} üìä Verificar uso do disco"
    echo -e "${YELLOW}0.${NC} Voltar"
    echo ""
    echo -ne "${PURPLE}Escolha [0-5]: ${NC}"
    
    read choice
    case $choice in
        1)
            echo -e "${CYAN}üßπ Executando cleanup b√°sico...${NC}"
            docker system prune -f
            echo -e "${GREEN}‚úÖ Cleanup b√°sico conclu√≠do${NC}"
            ;;
        2)
            echo -e "${RED}‚ö†Ô∏è ATEN√á√ÉO: Isso remover√° TUDO n√£o utilizado (containers, images, volumes, networks)${NC}"
            echo -e "${YELLOW}Continuar? (y/N):${NC}"
            read -n 1 confirm
            echo
            if [[ $confirm =~ ^[Yy]$ ]]; then
                docker system prune -a -f --volumes
                echo -e "${GREEN}‚úÖ Cleanup completo conclu√≠do${NC}"
            fi
            ;;
        3)
            docker container prune -f
            echo -e "${GREEN}‚úÖ Containers parados removidos${NC}"
            ;;
        4)
            docker image prune -f
            echo -e "${GREEN}‚úÖ Images sem tag removidas${NC}"
            ;;
        5)
            docker system df -v
            ;;
        0)
            return
            ;;
    esac
    
    echo ""
    read -p "Pressione Enter para continuar..."
}

# 9. Logs
view_logs() {
    clear
    echo -e "${BLUE}üìú VISUALIZA√á√ÉO DE LOGS${NC}"
    echo -e "${BLUE}======================${NC}"
    echo ""
    
    if [ $(docker ps -q | wc -l) -eq 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è Nenhum container ativo${NC}"
        read -p "Pressione Enter..."
        return
    fi
    
    echo -e "${CYAN}üìã Containers ativos:${NC}"
    docker ps --format "{{.Names}}"
    echo ""
    
    echo -e "${YELLOW}1.${NC} üìú Logs de container espec√≠fico"
    echo -e "${YELLOW}2.${NC} üîÑ Logs em tempo real (follow)"
    echo -e "${YELLOW}3.${NC} üìä Logs com timestamp"
    echo -e "${YELLOW}4.${NC} üìã Logs do docker-compose"
    echo -e "${YELLOW}0.${NC} Voltar"
    echo ""
    echo -ne "${PURPLE}Escolha [0-4]: ${NC}"
    
    read choice
    case $choice in
        1)
            echo -e "${CYAN}Nome do container:${NC}"
            read container_name
            echo -e "${CYAN}N√∫mero de linhas [100]:${NC}"
            read lines
            lines=${lines:-100}
            docker logs --tail "$lines" "$container_name"
            ;;
        2)
            echo -e "${CYAN}Nome do container:${NC}"
            read container_name
            docker logs -f "$container_name"
            ;;
        3)
            echo -e "${CYAN}Nome do container:${NC}"
            read container_name
            docker logs -t "$container_name"
            ;;
        4)
            if [ -f "docker-compose.yml" ] || [ -f "compose.yml" ]; then
                docker-compose logs -f
            else
                echo -e "${RED}‚ùå Nenhum docker-compose.yml encontrado${NC}"
            fi
            ;;
        0)
            return
            ;;
    esac
    
    echo ""
    read -p "Pressione Enter para continuar..."
}

# Loop principal
main() {
    check_docker
    
    while true; do
        show_header
        show_main_menu
        
        read choice
        case $choice in
            1) status_info ;;
            2) dev_environments ;;
            3) manage_containers ;;
            4) manage_images ;;
            5) manage_compose ;;
            6) manage_networks ;;
            7) manage_volumes ;;
            8) cleanup_docker ;;
            9) view_logs ;;
            0) 
                echo -e "${GREEN}üê≥ At√© mais!${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}‚ùå Op√ß√£o inv√°lida. Pressione Enter...${NC}"
                read
                ;;
        esac
    done
}

# Executar
main