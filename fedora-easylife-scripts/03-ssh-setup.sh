#!/bin/bash

# 🔐 SSH Setup Script - Configuração completa de chaves SSH
# Para GitHub, GitLab, VPS e outros serviços
#
# Uso:
#   chmod +x ssh-setup.sh
#   ./ssh-setup.sh

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Função para print colorido
print_colored() {
    echo -e "${1}${2}${NC}"
}

# Função para títulos
print_title() {
    echo
    print_colored $CYAN "=================================================="
    print_colored $CYAN "  $1"
    print_colored $CYAN "=================================================="
}

# Função para sucesso
print_success() {
    print_colored $GREEN "✅ $1"
}

# Função para aviso
print_warning() {
    print_colored $YELLOW "⚠️  $1"
}

# Função para erro
print_error() {
    print_colored $RED "❌ $1"
}

# Função para info
print_info() {
    print_colored $BLUE "ℹ️  $1"
}

# Verificar se está rodando como root
if [[ $EUID -eq 0 ]]; then
   print_error "Este script não deve ser executado como root!"
   exit 1
fi

print_title "SSH Setup Script - Configuração Completa"
print_info "Este script vai configurar chaves SSH para GitHub, GitLab, VPS, etc."
echo

# Menu principal
show_menu() {
    clear
    print_title "SSH Setup Menu"
    echo "1. 🔑 Configurar chaves SSH completas (recomendado)"
    echo "2. 🐙 Só GitHub"
    echo "3. 🦊 Só GitLab"
    echo "4. 🖥️  Só VPS/Servidores"
    echo "5. 📋 Listar chaves existentes"
    echo "6. 🧪 Testar conexões"
    echo "7. 📖 Mostrar chaves públicas"
    echo "8. 🗑️  Remover chave específica"
    echo "9. ℹ️  Ajuda e documentação"
    echo "0. 🚪 Sair"
    echo
    read -p "Escolha uma opção [0-9]: " choice
}

# Função para coletar email
get_email() {
    if [[ -z "$EMAIL" ]]; then
        read -p "Digite seu email: " EMAIL
        
        # Validar email básico
        if [[ ! "$EMAIL" =~ ^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$ ]]; then
            print_error "Email inválido!"
            get_email
        fi
    fi
}

# Função para configurar SSH agent
setup_ssh_agent() {
    print_info "Configurando SSH agent..."
    
    # Verificar se ssh-agent está rodando
    if ! pgrep -x "ssh-agent" > /dev/null; then
        eval "$(ssh-agent -s)"
    fi
    
    # Adicionar configuração ao .bashrc/.zshrc
    local shell_rc=""
    if [[ "$SHELL" == *"zsh"* ]]; then
        shell_rc="$HOME/.zshrc"
    else
        shell_rc="$HOME/.bashrc"
    fi
    
    if ! grep -q "ssh-agent" "$shell_rc" 2>/dev/null; then
        echo '
# SSH Agent auto-start
if ! pgrep -x "ssh-agent" > /dev/null; then
    eval "$(ssh-agent -s)" > /dev/null
fi' >> "$shell_rc"
        print_success "SSH agent configurado no $shell_rc"
    fi
}

# Função para gerar chave SSH
generate_ssh_key() {
    local service="$1"
    local email="$2"
    local key_name="$3"
    
    print_info "Gerando chave SSH para $service..."
    
    # Verificar se já existe
    if [[ -f "$HOME/.ssh/$key_name" ]]; then
        read -p "Chave $key_name já existe. Sobrescrever? [y/N]: " overwrite
        if [[ ! "$overwrite" =~ ^[Yy]$ ]]; then
            print_warning "Pulando geração da chave $key_name"
            return
        fi
    fi
    
    # Gerar chave
    ssh-keygen -t ed25519 -C "$email" -f "$HOME/.ssh/$key_name" -N ""
    
    # Adicionar ao ssh-agent
    ssh-add "$HOME/.ssh/$key_name"
    
    print_success "Chave $key_name gerada com sucesso!"
}

# Função para configurar arquivo SSH config
setup_ssh_config() {
    local config_file="$HOME/.ssh/config"
    
    print_info "Configurando arquivo SSH config..."
    
    # Criar diretório .ssh se não existir
    mkdir -p "$HOME/.ssh"
    chmod 700 "$HOME/.ssh"
    
    # Backup do config existente
    if [[ -f "$config_file" ]]; then
        cp "$config_file" "$config_file.backup.$(date +%Y%m%d_%H%M%S)"
        print_info "Backup do config criado"
    fi
    
    # Criar/atualizar config
    cat > "$config_file" << 'EOF'
# SSH Config - Auto-generated by ssh-setup.sh

# GitHub
Host github.com
    HostName github.com
    User git
    IdentityFile ~/.ssh/id_github
    IdentitiesOnly yes

# GitLab
Host gitlab.com
    HostName gitlab.com
    User git
    IdentityFile ~/.ssh/id_gitlab
    IdentitiesOnly yes

# VPS Principal
Host vps
Host meu-vps
    HostName SEU_VPS_IP_AQUI
    User root
    Port 22
    IdentityFile ~/.ssh/id_vps
    IdentitiesOnly yes

# VPS Secundário (exemplo)
Host vps2
    HostName SEU_VPS2_IP_AQUI
    User ubuntu
    Port 22
    IdentityFile ~/.ssh/id_vps2
    IdentitiesOnly yes

# Servidor de desenvolvimento
Host dev-server
    HostName SEU_DEV_SERVER_IP_AQUI
    User developer
    Port 22
    IdentityFile ~/.ssh/id_dev_server
    IdentitiesOnly yes

# Configurações globais
Host *
    AddKeysToAgent yes
    UseKeychain yes
    ServerAliveInterval 60
    ServerAliveCountMax 3
    IdentitiesOnly yes
EOF

    chmod 600 "$config_file"
    print_success "Arquivo SSH config configurado"
    print_warning "ATENÇÃO: Edite $config_file e substitua os IPs pelos seus servidores reais!"
}

# Função para mostrar chave pública
show_public_key() {
    local key_name="$1"
    local service="$2"
    
    if [[ -f "$HOME/.ssh/$key_name.pub" ]]; then
        print_title "Chave pública para $service"
        cat "$HOME/.ssh/$key_name.pub"
        echo
        print_info "Cole esta chave em: $service"
        
        case "$service" in
            "GitHub")
                print_info "GitHub: Settings → SSH and GPG keys → New SSH key"
                print_info "URL: https://github.com/settings/ssh/new"
                ;;
            "GitLab")
                print_info "GitLab: Preferences → SSH Keys → Add new key"
                print_info "URL: https://gitlab.com/-/profile/keys"
                ;;
            "VPS")
                print_info "VPS: Adicione ao arquivo ~/.ssh/authorized_keys do servidor"
                ;;
        esac
        
        read -p "Pressione Enter para continuar..."
    else
        print_error "Chave $key_name não encontrada!"
    fi
}

# Função para testar conexão
test_connection() {
    local host="$1"
    local service="$2"
    
    print_info "Testando conexão com $service..."
    
    case "$service" in
        "GitHub")
            if ssh -T git@github.com 2>&1 | grep -q "successfully authenticated"; then
                print_success "Conexão com GitHub OK!"
            else
                print_error "Falha na conexão com GitHub"
            fi
            ;;
        "GitLab")
            if ssh -T git@gitlab.com 2>&1 | grep -q "Welcome to GitLab"; then
                print_success "Conexão com GitLab OK!"
            else
                print_error "Falha na conexão com GitLab"
            fi
            ;;
        *)
            if ssh -o ConnectTimeout=5 -o BatchMode=yes "$host" exit 2>/dev/null; then
                print_success "Conexão com $host OK!"
            else
                print_error "Falha na conexão com $host"
                print_info "Verifique se o servidor está rodando e se a chave foi adicionada ao authorized_keys"
            fi
            ;;
    esac
}

# Configuração completa
setup_complete() {
    get_email
    setup_ssh_agent
    
    print_title "Gerando chaves SSH"
    
    # GitHub
    generate_ssh_key "GitHub" "$EMAIL" "id_github"
    
    # GitLab
    generate_ssh_key "GitLab" "$EMAIL" "id_gitlab"
    
    # VPS Principal
    generate_ssh_key "VPS Principal" "$EMAIL" "id_vps"
    
    # VPS Secundário (opcional)
    read -p "Deseja criar chave para VPS secundário? [y/N]: " create_vps2
    if [[ "$create_vps2" =~ ^[Yy]$ ]]; then
        generate_ssh_key "VPS Secundário" "$EMAIL" "id_vps2"
    fi
    
    # Servidor de desenvolvimento (opcional)
    read -p "Deseja criar chave para servidor de desenvolvimento? [y/N]: " create_dev
    if [[ "$create_dev" =~ ^[Yy]$ ]]; then
        generate_ssh_key "Servidor Dev" "$EMAIL" "id_dev_server"
    fi
    
    setup_ssh_config
    
    print_title "Próximos passos"
    print_info "1. As chaves foram geradas em ~/.ssh/"
    print_info "2. Use a opção 7 para ver as chaves públicas"
    print_info "3. Adicione as chaves nos respectivos serviços"
    print_info "4. Edite ~/.ssh/config com os IPs dos seus servidores"
    print_info "5. Use a opção 6 para testar as conexões"
    
    read -p "Pressione Enter para continuar..."
}

# Configurar só GitHub
setup_github() {
    get_email
    setup_ssh_agent
    generate_ssh_key "GitHub" "$EMAIL" "id_github"
    
    # Mostrar chave
    show_public_key "id_github" "GitHub"
}

# Configurar só GitLab
setup_gitlab() {
    get_email
    setup_ssh_agent
    generate_ssh_key "GitLab" "$EMAIL" "id_gitlab"
    
    # Mostrar chave
    show_public_key "id_gitlab" "GitLab"
}

# Configurar VPS
setup_vps() {
    get_email
    setup_ssh_agent
    
    read -p "Nome da chave (ex: id_vps, id_server): " key_name
    read -p "IP do servidor: " server_ip
    read -p "Usuário do servidor [root]: " server_user
    server_user=${server_user:-root}
    read -p "Porta SSH [22]: " ssh_port
    ssh_port=${ssh_port:-22}
    
    generate_ssh_key "VPS ($server_ip)" "$EMAIL" "$key_name"
    
    # Adicionar ao config SSH
    cat >> "$HOME/.ssh/config" << EOF

# $key_name
Host $key_name
    HostName $server_ip
    User $server_user
    Port $ssh_port
    IdentityFile ~/.ssh/$key_name
    IdentitiesOnly yes
EOF

    print_success "Configuração adicionada ao SSH config"
    show_public_key "$key_name" "VPS"
}

# Listar chaves
list_keys() {
    print_title "Chaves SSH existentes"
    
    if ls "$HOME/.ssh"/id_* 2>/dev/null | grep -v ".pub" >/dev/null; then
        for key in "$HOME/.ssh"/id_*; do
            if [[ -f "$key" && ! "$key" =~ \.pub$ ]]; then
                local key_name=$(basename "$key")
                local key_type=$(ssh-keygen -l -f "$key" 2>/dev/null | awk '{print $4}' | tr -d '()')
                local key_bits=$(ssh-keygen -l -f "$key" 2>/dev/null | awk '{print $1}')
                
                echo "🔑 $key_name ($key_type, $key_bits bits)"
                
                # Verificar se está no ssh-agent
                if ssh-add -l 2>/dev/null | grep -q "$key"; then
                    print_success "   ✓ Carregada no ssh-agent"
                else
                    print_warning "   ⚠ Não carregada no ssh-agent"
                fi
            fi
        done
    else
        print_info "Nenhuma chave SSH encontrada"
    fi
    
    read -p "Pressione Enter para continuar..."
}

# Testar todas as conexões
test_all_connections() {
    print_title "Testando conexões SSH"
    
    # GitHub
    if [[ -f "$HOME/.ssh/id_github" ]]; then
        test_connection "github.com" "GitHub"
    fi
    
    # GitLab
    if [[ -f "$HOME/.ssh/id_gitlab" ]]; then
        test_connection "gitlab.com" "GitLab"
    fi
    
    # Outros hosts do config
    if [[ -f "$HOME/.ssh/config" ]]; then
        echo
        print_info "Testando outros hosts configurados..."
        grep "^Host " "$HOME/.ssh/config" | grep -v "github.com\|gitlab.com\|\*" | while read -r line; do
            local host=$(echo "$line" | awk '{print $2}')
            test_connection "$host" "$host"
        done
    fi
    
    read -p "Pressione Enter para continuar..."
}

# Mostrar todas as chaves públicas
show_all_public_keys() {
    print_title "Chaves públicas"
    
    for key in "$HOME/.ssh"/*.pub; do
        if [[ -f "$key" ]]; then
            local key_name=$(basename "$key" .pub)
            echo
            print_colored $YELLOW "📋 $key_name:"
            cat "$key"
        fi
    done
    
    echo
    read -p "Pressione Enter para continuar..."
}

# Remover chave
remove_key() {
    print_title "Remover chave SSH"
    
    echo "Chaves disponíveis:"
    local keys=()
    local i=1
    
    for key in "$HOME/.ssh"/id_*; do
        if [[ -f "$key" && ! "$key" =~ \.pub$ ]]; then
            local key_name=$(basename "$key")
            echo "$i. $key_name"
            keys+=("$key_name")
            ((i++))
        fi
    done
    
    if [[ ${#keys[@]} -eq 0 ]]; then
        print_info "Nenhuma chave encontrada"
        read -p "Pressione Enter para continuar..."
        return
    fi
    
    echo
    read -p "Escolha o número da chave para remover [1-${#keys[@]}]: " choice
    
    if [[ "$choice" =~ ^[0-9]+$ ]] && [[ "$choice" -ge 1 ]] && [[ "$choice" -le ${#keys[@]} ]]; then
        local key_to_remove="${keys[$((choice-1))]}"
        
        print_warning "Isso vai remover permanentemente a chave: $key_to_remove"
        read -p "Tem certeza? [y/N]: " confirm
        
        if [[ "$confirm" =~ ^[Yy]$ ]]; then
            # Remover do ssh-agent
            ssh-add -d "$HOME/.ssh/$key_to_remove" 2>/dev/null || true
            
            # Remover arquivos
            rm -f "$HOME/.ssh/$key_to_remove"
            rm -f "$HOME/.ssh/$key_to_remove.pub"
            
            print_success "Chave $key_to_remove removida com sucesso!"
        else
            print_info "Operação cancelada"
        fi
    else
        print_error "Opção inválida"
    fi
    
    read -p "Pressione Enter para continuar..."
}

# Mostrar ajuda
show_help() {
    print_title "Ajuda e Documentação"
    
    cat << 'EOF'
🔐 SSH Setup Script - Guia de Uso

COMANDOS ÚTEIS:
  ssh-add -l                 # Listar chaves carregadas
  ssh-add ~/.ssh/id_github   # Carregar chave específica
  ssh -T git@github.com      # Testar GitHub
  ssh -T git@gitlab.com      # Testar GitLab
  ssh vps                    # Conectar ao VPS (via config)

ESTRUTURA DE ARQUIVOS:
  ~/.ssh/id_github          # Chave privada GitHub
  ~/.ssh/id_github.pub      # Chave pública GitHub
  ~/.ssh/id_gitlab          # Chave privada GitLab
  ~/.ssh/id_gitlab.pub      # Chave pública GitLab
  ~/.ssh/id_vps             # Chave privada VPS
  ~/.ssh/config             # Configurações SSH

EXEMPLO DE USO:
  1. Execute o script e escolha "Configuração completa"
  2. Use opção 7 para ver as chaves públicas
  3. Adicione as chaves no GitHub/GitLab/VPS
  4. Edite ~/.ssh/config com os IPs reais
  5. Teste as conexões com opção 6

CONECTAR AO VPS:
  ssh vps                   # Usando alias do config
  ssh user@ip -i ~/.ssh/id_vps  # Direto

ADICIONAR CHAVE NO VPS:
  ssh-copy-id -i ~/.ssh/id_vps.pub user@ip

TROUBLESHOOTING:
  - Se "Permission denied": verifique se a chave foi adicionada
  - Se "Connection refused": verifique IP e porta
  - Use ssh -v para debug detalhado

SEGURANÇA:
  - Nunca compartilhe chaves privadas (sem .pub)
  - Faça backup das chaves importantes
  - Use senhas nas chaves para ambientes sensíveis
EOF

    read -p "Pressione Enter para continuar..."
}

# Loop principal
while true; do
    show_menu
    
    case $choice in
        1)
            setup_complete
            ;;
        2)
            setup_github
            ;;
        3)
            setup_gitlab
            ;;
        4)
            setup_vps
            ;;
        5)
            list_keys
            ;;
        6)
            test_all_connections
            ;;
        7)
            show_all_public_keys
            ;;
        8)
            remove_key
            ;;
        9)
            show_help
            ;;
        0)
            print_success "Script finalizado!"
            exit 0
            ;;
        *)
            print_error "Opção inválida!"
            sleep 1
            ;;
    esac
done
